//'use strict';

angular.module('portraitfrancaisApp')
.controller('EditorCtrl', function ($scope, $http, portraitsFactory, $stateParams, Portraits, $location, $timeout) {

	$scope.currDot = {};
	$scope.countDot = 0;
	$scope.showTextEditor = false;

	portraitsFactory().$promise.then(function(portraits) {
		$scope.portraits 	= handleAPropos(portraits);
		//used by top left corner portrait name
		var portraitInUrl 	= $stateParams.portrait ? $stateParams.portrait.replace("_", " ") : "";
		$scope.portrait 	= portraitInUrl ? findPortraitToEdit(portraitInUrl) : null;
		$scope.portraits = $scope.portraits.map(function (ptr) {
			if (typeof(ptr.dots) == 'string') {
				ptr.dots = JSON.parse(ptr.dots);
			}
			return (ptr);
		});
		if ($scope.portrait && $scope.portrait.dots) {
			$scope.displaydots();
			// console.log($scope.portrait.dots);
			$scope.countDot = $scope.portrait.dots.length;
		}
		else if (portraitInUrl) {
			$scope.portrait.dots = [];
		}
		console.log('initial = ' + $scope.countDot);
		console.log($scope.portraits);
	});
	console.log($scope.portraits);

	// Functions
	//▶   DISPLAY DOTS
	$scope.displaydots = function () {
		if ($scope.portrait.dots.length) {
			$scope.portrait.dots.forEach( function (dot) {
				var str = '';
				str = "<svg class=\"dotOnImg" + dot.ordre +"\" height=\"15\" width=\"15\""
				+ "style=\"left:calc("
				+ dot.coordX
				+ "% - 5px);top:calc("
				+ dot.coordY
				+ "% - 5px);";
				str += "\"><circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"white\"/></svg>";
				$('.fitImg').append(str);
			}
										);
		}
	}
	//」
	function hasExtension(inputID, exts) {
			var fileName = document.getElementById(inputID).value;
	return (new RegExp('(' + exts.join('|').replace(/\./g, '\\.') + ')$')).test(fileName);
}
	//▶  //upload
	$scope.upload = function(tagId) {
		tagId = tagId;
		var f = document.getElementById(tagId).files[0]
		if (!f){return;}

		if (tagId == 'image'){
			$scope.imageName = f.name;
		} else {
			$scope.thumbnailName = f.name;
		}
		var imgsize = f.size/1024; 
		if (imgsize > 5000) {
			alert("Max size: 5Mb. Please consider uploading a lighter image. Thank you.");
			return;
		} else if (!hasExtension(tagId, ['.png'])) {
			alert("Not Png file");
			return;
		} else {
			console.log("upload started");
			$('body').css('cursor','wait');
			$('upload').css('cursor','wait');

			var r = new FileReader();

			//▶  onloadend
			r.onloadend = function(e){
				var img = e.target.result;
				$('body').css('cursor','default');
				$('upload').css('cursor','default');

				if (tagId == 'image'){
					$("#portraitImage").load(function() {
						var img = $('#portraitImage')
						var w = img.width();
						var y = img.height();
						console.log(w);
						console.log(y);
						$('.fitImg').css({
							width: w,
							height: y
						});
					})
				}
				setTimeout(function () {
					$scope.$apply(function(){
						if (tagId == 'image'){
							$scope.portrait.img = img;
						} else {
							$scope.thumbnail 	= img;
						}
					});
				}, 10);


			}
			//」
			r.readAsDataURL(f);
		}
	}
	//」
	//▶  update
	$scope.update = function(portrait) {
		console.log("update");
		portrait = portrait;
		Portraits = Portraits;
		if ($scope.portrait.img){
			portrait.img 			= $scope.portrait.img
			portrait.imageName  	= $scope.imageName
		}
		if ($scope.thumbnail){
			portrait.thumbnail 			= $scope.thumbnail
			portrait.thumbnailName  	= $scope.thumbnailName
		}

		//update
		if (portrait._id){
			portrait.dots = JSON.stringify(portrait.dots);
			portrait.$update({portrait: portrait._id}, function(portraitUpdated) {
				$location.path('/editor');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		}
		else {
			// console.log(img);
			// console.log('portrait.dots');
			// console.log(portrait.dots);
			//send you binary data via $http or $resource or do anything else with it

			portrait = new Portraits ({
				//▶  //implemented
				name 			: portrait.name,
				img 			: portrait.img,
				thumbnail 		: portrait.thumbnail,
				thumbnailName	: portrait.thumbnailName,
				imageName 		: portrait.imageName,
				color 			: portrait.color,
				profession 		: portrait.profession,
				dots 			: JSON.stringify(portrait.dots),

				//not implemented
				intro 			: portrait.intro,
				format 			: portrait.format,
				alaune 			: portrait.alaune,
				fulltxt 		: portrait.fulltxt
				//」
			});

			// Redirect after save
			portrait.$save(function(response) {
				console.log($scope.portraits);
				console.log(portrait);

				// Clear form fields
				$scope.img 			= '';
				$scope.name 		= '';
				$scope.dots 		= '';
				$scope.alaune 		= '';
				$scope.profession 	= '';

				$location.path('/editor');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
				console.log($scope.error);
			})
			console.log(portrait);
			$scope.portraits.push(portrait);
			console.log($scope.portraits);
		}
	}
	//」
	//▶  remove
	$scope.remove = function(portrait) {
		if (confirm('Voulez vous supprimer definitivement le portrait ?')) {
			//lookup of portraitName in $scope.portraits
			portrait.$remove({portrait: portrait._id}, function(portraitRemoved) {
				var id = $scope.portraits.map(function(e) { return e._id; }).indexOf(portraitRemoved._id);
				$scope.portraits.splice(id,1);
				$location.path('editor');
			});
		}
	}
	//」
	//▶  goToEditPortrait
	//  button redirection to Portrait Creation/Edition view
	$scope.goToEditPortrait = function (portrait) {
		portrait = portrait ? portrait : 'new';
		$location.path('/editor/' + portrait);
	}
	//」
	//▶  // find portrait to edit
	function findPortraitToEdit (name) {
		if (name == 'new') 
			return {}
		var result = $scope.portraits.filter(function( portrait ) {
			return portrait.name == name;
		});
		return (result[0]);
	}
	//」
	//▶  handle apropos
	function handleAPropos (portrait) {
		var cleanPortrait = [];
		var cleanIndex = 0;

		for (var j = 0; j < portrait.length; j++) {
			if (portrait[j].apropos) {
				var aproposIndex = j;
			}
		}
		for (j = 0; j < portrait.length; j++) {
			if (j === aproposIndex) { j++; }
			if (portrait[j]) {
				cleanPortrait[cleanIndex] = portrait[j];
				if (typeof(cleanPortrait[cleanIndex].dots) == 'string') {
					cleanPortrait[cleanIndex].dots = JSON.parse(portrait[j].dots);
				}
				cleanIndex++;
			}
		}
		$scope.apropos = portrait[aproposIndex];
		return (cleanPortrait);
	};
	//」
	//▶  Click events
	$("#modifierAPropos").click(function(){
		$("#aProposEditor").slideDown();
	});

	$("#closeAPropos").click(function(){
		$("#aProposEditor").slideUp();
	});

	$(window).load(function() {
		var img = $('.fitImg').find('img');
		var w = img.width();
		var y = img.height();
		$('.fitImg').css({
			width: w,
			height: y
		});
	});


	$('.fitImg').click(function(e) {
		var posX = $(this).offset().left, posY = $(this).offset().top;
		var totalX = $('.fitImg').width();
		var totalY = $('.fitImg').height();

		$scope.currDot.coordX = ((e.pageX - posX) / totalX) * 100;
		$scope.currDot.coordY = ((e.pageY - posY) / totalY) * 100;
		$scope.previewDot();
		$timeout(function() {
			if (confirm("Voulez-vous creer un point a cet endroit ?")) {
				// $scope.newDots.forEach( function (dot) { dot.preview = false; });
				$scope.showTextEditor = true;
				$scope.$apply();
				removePreview();
			}
			removePreview();
		}, 500);
	});
	//」
	//▶  removePreview
	function removePreview () {
		$('.preview').remove();
		// $scope.newDots.splice($scope.newDots.indexOf('preview'), 1);
		if ($scope.portrait.dots.length) {
			$scope.portrait.dots = $scope.portrait.dots.filter( function (dot) {
				if (dot) {
					if (dot.preview === false) {
						return (dot);
					}
				};
			});
		}
	};
	//」
	//▶  PreviewDot
	$scope.previewDot = function () {
		$scope.portrait.dots.push({
			coordY : $scope.currDot.coordY,
			coordX : $scope.currDot.coordX,
			data : $scope.currDot.data,
			preview : true
		});
		$scope.portrait.dots.forEach( function (dot) {
			var str = '';
			str = "<svg class=\"dotOnImg preview\" height=\"15\" width=\"15\""
			+ "style=\"left:calc("
			+ $scope.currDot.coordX
			+ "% - 5px);top:calc("
			+ $scope.currDot.coordY
			+ "% - 5px);";
			str += "\"><circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"white\"/></svg>";
			$('.fitImg').append(str);
		}
									);
	}
	//」
	//▶  //AddDot
	$scope.addDot = function () {
		$scope.countDot++;
		console.log('before add ' + $scope.countDot);
		// console.log({
		// 	coordY : $scope.currDot.coordY,
		// 	coordX : $scope.currDot.coordX,
		// 	data : $scope.currDot.data,
		// 	ordre: $scope.countDot,
		// 	preview: false
		// });
		$scope.portrait.dots.push({
			coordY : $scope.currDot.coordY,
			coordX : $scope.currDot.coordX,
			data : $scope.currDot.data,
			ordre: $scope.countDot,
			preview: false
		});
		console.log('after add ' + $scope.countDot);
		// console.log($scope.portrait);
		$scope.displaydots();
		$scope.currDot.data = '';
		$scope.showTextEditor = !$scope.showTextEditor;
	};
	//」
	//▶  Various
	$scope.removeText = function () {
		$scope.currDot.data = '';
	};

	$scope.showIntroTextEditor = false;
	$scope.editIntro = function () {
		if ($scope.showIntroTextEditor == false) {
			$scope.showIntroTextEditor = true;
			$scope.showTextEditor = false;
		}
		else { $scope.showIntroTextEditor = false; }
	};

	$scope.addIntro = function () {
		$scope.showIntroTextEditor = false;
		$scope.showTextEditor = false;
	};

	$scope.removeIntroText = function () {
		$scope.portrait.intro = '';
	};

	$scope.dotEditorShow = false;
	$scope.editDots = function() {
		console.log('editDots');
		$scope.dotEditorShow = !$scope.dotEditorShow;
	};

	$scope.showDotDataEditor = false;
	$scope.editDotData = function () {
		$scope.showDotDataEditor = true;
	};
	//」
	//▶  DotFinder
	function dotFinder (orderDot) {
		for (var z = 0; z <= $scope.portrait.dots.length; z++) {
			if ($scope.portrait.dots[z].ordre === orderDot) {
				return (z);
			}
		}
	}

});
//」
